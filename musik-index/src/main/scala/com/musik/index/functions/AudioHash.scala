/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.musik.index.functions

import com.musik.db.entity.SongContent
import com.musik.index.HashGenerator

object AudioHash {
  private[this] val hash = new HashGenerator

  /**
    * Generates hashes according to peak points of audio signal
    *
    * @param obj the peak points of the magnitudes that generated by using signal samples
    * @return the hash group that generated using signal samples
    */
  def apply(obj: (String, Array[Array[Byte]])): Array[SongContent] = {
    if (obj == null) {
      return null
    }

    val name = obj._1
    val hashes = hash.generate(obj._2)

    val songs = for (i <- 0 until hashes.length) yield new SongContent(hashes(i), i, name)

    songs.toArray
  }
}